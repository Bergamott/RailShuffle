import java.awt.*;import java.awt.image.*;import java.awt.event.*;import java.io.*;import java.awt.Color;import java.awt.Graphics2D;import java.awt.image.BufferedImage;import javax.imageio.ImageIO;import javax.imageio.ImageWriter;import javax.imageio.ImageWriteParam;import javax.imageio.IIOImage;import javax.imageio.stream.ImageOutputStream;import javax.swing.JFileChooser;import javax.swing.filechooser.*;import java.util.*;import java.io.File;import java.io.FileOutputStream;import java.io.FileInputStream;// Turns pink shades into transparent or semitransparent// Creates @2 versions of files not already convertedpublic class scale{	public static void main(String args[])	{		BufferedImage m_original;		String outName;		int w,h;		int i,j,k,l,m,n;		int inPix[],halfPix[];		try{                    File folder = new File(".");                    File[] listOfFiles = folder.listFiles();                    for (i=0;i<listOfFiles.length;i++)                    {                        File tmpF = listOfFiles[i];                        if (tmpF.getName().indexOf(".png") > 0 &&                                tmpF.getName().indexOf("@2x.png") < 0)                        {                            String doubleS = tmpF.getName().substring(0,tmpF.getName().indexOf(".png"))+                                    "@2x.png";                            boolean hasDouble = false;                            for (j=0;j<listOfFiles.length;j++)                                if (listOfFiles[j].getName().equalsIgnoreCase(doubleS))                                    hasDouble = true;                            if (!hasDouble) // Needs conversion                            {                                System.out.println("Converting "+tmpF.getName());                                m_original=ImageIO.read(new FileInputStream(tmpF.getName()));				w=m_original.getWidth();				h=m_original.getHeight();				inPix=new int[w*h];				m_original.getRGB(0,0,w,h,inPix,0,w);								k = w*h;				for (m=0;m<k;m++)				{					l = inPix[m];                                        if (l == 0xffff00ff)                                            l = 0x000000;                                        else if (l == 0xffcc3366)                                            l = 0x60000000;					inPix[m] = l;				}				BufferedImage m_outImage=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);				m_outImage.setRGB(0,0,w,h,inPix,0,w);				savePng(m_outImage,doubleS);                                                                // Create scaled down version                                halfPix = new int[w*h/4];                                for (m=0;m<h/2;m++)                                    for (j=0;j<w/2;j++)                                    {                                        int in0 = inPix[m*w*2+j*2];                                        int in1 = inPix[m*w*2+j*2+1];                                        int in2 = inPix[m*w*2+w+j*2];                                        int in3 = inPix[m*w*2+w+j*2+1];                                        int a = (((in0 & 0xff000000) >>> 24)+                                                ((in1 & 0xff000000) >>> 24)+                                                ((in2 & 0xff000000) >>> 24)+                                                ((in3 & 0xff000000) >>> 24))/4;                                        int r = (((in0 & 0xff0000) >> 16)+                                                ((in1 & 0xff0000) >> 16)+                                                ((in2 & 0xff0000) >> 16)+                                                ((in3 & 0xff0000) >> 16))/4;                                        int g = (((in0 & 0xff00) >> 8)+                                                ((in1 & 0xff00) >> 8)+                                                ((in2 & 0xff00) >> 8)+                                                ((in3 & 0xff00) >> 8))/4;                                        int b = (((in0 & 0xff))+                                                ((in1 & 0xff))+                                                ((in2 & 0xff))+                                                ((in3 & 0xff)))/4;                                        halfPix[m*w/2+j] = (a<<24) | (r<<16) | (g<<8) | b;                                    }                                BufferedImage m_outHalf=new BufferedImage(w/2,h/2,BufferedImage.TYPE_INT_ARGB);				m_outHalf.setRGB(0,0,w/2,h/2,halfPix,0,w/2);				savePng(m_outHalf,tmpF.getName());                            }                        }                    }                                        /*			if (args.length==2)				outName = args[1];			else				outName = args[0];								m_original=ImageIO.read(new FileInputStream(args[0]));				w=m_original.getWidth();				h=m_original.getHeight();				inPix=new int[w*h];				m_original.getRGB(0,0,w,h,inPix,0,w);								k = w*h;				for (i=0;i<k;i++)				{					l = inPix[i];					if ((l & 0xff000000) != 0xff000000)						inPix[i] = 0xffff00ff;				}				BufferedImage m_outImage=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);				m_outImage.setRGB(0,0,w,h,inPix,0,w);				savePng(m_outImage,outName);*/		}		catch(Exception e){e.printStackTrace();}	}		public static void savePng(BufferedImage bI, String nam)	{		try{			Iterator iterator = ImageIO.getImageWritersBySuffix("png");			if (! iterator.hasNext())			{				throw new IllegalStateException("no writers found");			}			ImageWriter iw = (ImageWriter)iterator.next();			FileOutputStream os = new FileOutputStream(nam);			ImageOutputStream ios = ImageIO.createImageOutputStream(os);			iw.setOutput(ios);			ImageWriteParam iwp = iw.getDefaultWriteParam();			iw.write(bI);			System.out.println("Saved "+nam);		}catch(Exception e){e.printStackTrace();}	}}